from typing import Tuple

from PriorityQueue import PriorityQueue
from DataTypes.Schedule import Schedule
from DataTypes.Transform import Transform
from SearchStrategies.BestFirstSearch import best_first_search
from parse_files import ParseFiles
from DataTypes.State import State
from DataTypes.Action import Action
import csv
from successors import RandomSuccessorFunction


def country_scheduler(self_country_name: str, resources_filename: str, initial_world_state: dict,
                      output_filename: str, num_output_schedulers: int, depth_bound: int,
                      max_frontier_size: int) -> None:

    ######################################
    # Search through priority queue for optimal schedules, checking bounds
    ######################################

    # calculate schedule EU

    # # generate successor by adding new random schedule

    # Define utility function
    # TODO
    # def utility_fn(state: State) -> float:
    #     return state.get_utility()

    # Define search strategy
    # TODO - use my own, what when where?
    """ 
    Best-first search?
    Heuristic depth-first search?
    Iterative deepening heuristic depth-first search?
    """
    def successor_fn():
        """
        Returns a list of successor states generated by the generate_random_schedule function.
        """

        sch_gen = RandomSuccessorFunction(self_country_name)

        successors = []
        for _ in range(10):  # Generate 10 successors
            successor = sch_gen.generate_random_schedule(5)
            successors.append(successor)
        return successors

    best_first_search(initial_world_state, successor_fn,
                      depth_bound, max_frontier_size)

    # # Search for optimal schedule
    # solution = search_strategy.search(
    #     initial_world_state, schedule.ac, depth_bound, max_frontier_size)

    # todo: depth bound

    ######################################
    # write schedule to file
    ######################################
    with open(output_filename, 'w') as f:
        writer = csv.writer(f)
        for i in range(num_output_schedulers):
            # writer.writerow(solution.get_schedule(i))
    # for filename in os.listdir('transformation-templates', 'r'):
    #     template_path = os.path.join(templates_path, filename)
    #     with open(template_path, 'r') as file:
    #         contents = file.read().strip()
    #         transform = Transform(template_path, self.logger)
    #         actions.append(transform_action)
